/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET通用权限管理平台
 * 前后端分离架构，开箱即用，紧随前沿技术。<br/><a href='https://gitee.com/Run2948/Admin.NET/'>https://gitee.com/Run2948/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DeleteFileInfoInput } from '../models';
import { XnRestfulResultOfIActionResult } from '../models';
import { XnRestfulResultOfInt64 } from '../models';
import { XnRestfulResultOfListOfSysFile } from '../models';
import { XnRestfulResultOfObject } from '../models';
import { XnRestfulResultOfSysFile } from '../models';
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除文件
         * @param {DeleteFileInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoDeletePost: async (body?: DeleteFileInfoInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取文件详情
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoDetailGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysFileInfoDetailGet.');
            }
            const localVarPath = `/sysFileInfo/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载文件
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoDownloadGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysFileInfoDownloadGet.');
            }
            const localVarPath = `/sysFileInfo/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取文件列表
         * @param {number} [id] 文件Id
         * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
         * @param {string} [fileBucket] 文件仓库
         * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
         * @param {string} [fileSuffix] 文件后缀
         * @param {number} [fileSizeKb] 文件大小kb
         * @param {string} [fileSizeInfo] 文件大小信息，计算后的
         * @param {string} [fileObjectName] 存储到bucket的名称（文件唯一标识id）
         * @param {string} [filePath] 存储路径
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoListGet: async (id?: number, fileLocation?: number, fileBucket?: string, fileOriginName?: string, fileSuffix?: string, fileSizeKb?: number, fileSizeInfo?: string, fileObjectName?: string, filePath?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fileLocation !== undefined) {
                localVarQueryParameter['FileLocation'] = fileLocation;
            }

            if (fileBucket !== undefined) {
                localVarQueryParameter['FileBucket'] = fileBucket;
            }

            if (fileOriginName !== undefined) {
                localVarQueryParameter['FileOriginName'] = fileOriginName;
            }

            if (fileSuffix !== undefined) {
                localVarQueryParameter['FileSuffix'] = fileSuffix;
            }

            if (fileSizeKb !== undefined) {
                localVarQueryParameter['FileSizeKb'] = fileSizeKb;
            }

            if (fileSizeInfo !== undefined) {
                localVarQueryParameter['FileSizeInfo'] = fileSizeInfo;
            }

            if (fileObjectName !== undefined) {
                localVarQueryParameter['FileObjectName'] = fileObjectName;
            }

            if (filePath !== undefined) {
                localVarQueryParameter['FilePath'] = filePath;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页获取文件列表
         * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
         * @param {string} [fileBucket] 文件仓库
         * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoPageGet: async (fileLocation?: number, fileBucket?: string, fileOriginName?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (fileLocation !== undefined) {
                localVarQueryParameter['FileLocation'] = fileLocation;
            }

            if (fileBucket !== undefined) {
                localVarQueryParameter['FileBucket'] = fileBucket;
            }

            if (fileOriginName !== undefined) {
                localVarQueryParameter['FileOriginName'] = fileOriginName;
            }

            if (searchValue !== undefined) {
                localVarQueryParameter['SearchValue'] = searchValue;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['PageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (searchBeginTime !== undefined) {
                localVarQueryParameter['SearchBeginTime'] = searchBeginTime;
            }

            if (searchEndTime !== undefined) {
                localVarQueryParameter['SearchEndTime'] = searchEndTime;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 预览文件
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoPreviewGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysFileInfoPreviewGet.');
            }
            const localVarPath = `/sysFileInfo/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传头像
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadAvatarPost: async (file?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/uploadAvatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传文档
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadDocumentPost: async (file?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/uploadDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传文件
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadPost: async (file?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传商店图片
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadShopPost: async (file?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysFileInfo/uploadShop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除文件
         * @param {DeleteFileInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoDeletePost(body?: DeleteFileInfoInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取文件详情
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoDetailGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfSysFile>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 下载文件
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoDownloadGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfIActionResult>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoDownloadGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取文件列表
         * @param {number} [id] 文件Id
         * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
         * @param {string} [fileBucket] 文件仓库
         * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
         * @param {string} [fileSuffix] 文件后缀
         * @param {number} [fileSizeKb] 文件大小kb
         * @param {string} [fileSizeInfo] 文件大小信息，计算后的
         * @param {string} [fileObjectName] 存储到bucket的名称（文件唯一标识id）
         * @param {string} [filePath] 存储路径
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoListGet(id?: number, fileLocation?: number, fileBucket?: string, fileOriginName?: string, fileSuffix?: string, fileSizeKb?: number, fileSizeInfo?: string, fileObjectName?: string, filePath?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfListOfSysFile>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoListGet(id, fileLocation, fileBucket, fileOriginName, fileSuffix, fileSizeKb, fileSizeInfo, fileObjectName, filePath, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页获取文件列表
         * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
         * @param {string} [fileBucket] 文件仓库
         * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoPageGet(fileLocation?: number, fileBucket?: string, fileOriginName?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoPageGet(fileLocation, fileBucket, fileOriginName, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 预览文件
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoPreviewGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfIActionResult>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoPreviewGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传头像
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoUploadAvatarPost(file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfInt64>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoUploadAvatarPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传文档
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoUploadDocumentPost(file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoUploadDocumentPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传文件
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoUploadPost(file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfInt64>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoUploadPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传商店图片
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysFileInfoUploadShopPost(file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).sysFileInfoUploadShopPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 删除文件
         * @param {DeleteFileInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoDeletePost(body?: DeleteFileInfoInput, options?: any): AxiosPromise<void> {
            return FileApiFp(configuration).sysFileInfoDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取文件详情
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoDetailGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfSysFile> {
            return FileApiFp(configuration).sysFileInfoDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下载文件
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoDownloadGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfIActionResult> {
            return FileApiFp(configuration).sysFileInfoDownloadGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取文件列表
         * @param {number} [id] 文件Id
         * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
         * @param {string} [fileBucket] 文件仓库
         * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
         * @param {string} [fileSuffix] 文件后缀
         * @param {number} [fileSizeKb] 文件大小kb
         * @param {string} [fileSizeInfo] 文件大小信息，计算后的
         * @param {string} [fileObjectName] 存储到bucket的名称（文件唯一标识id）
         * @param {string} [filePath] 存储路径
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoListGet(id?: number, fileLocation?: number, fileBucket?: string, fileOriginName?: string, fileSuffix?: string, fileSizeKb?: number, fileSizeInfo?: string, fileObjectName?: string, filePath?: string, options?: any): AxiosPromise<XnRestfulResultOfListOfSysFile> {
            return FileApiFp(configuration).sysFileInfoListGet(id, fileLocation, fileBucket, fileOriginName, fileSuffix, fileSizeKb, fileSizeInfo, fileObjectName, filePath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页获取文件列表
         * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
         * @param {string} [fileBucket] 文件仓库
         * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoPageGet(fileLocation?: number, fileBucket?: string, fileOriginName?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return FileApiFp(configuration).sysFileInfoPageGet(fileLocation, fileBucket, fileOriginName, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 预览文件
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoPreviewGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfIActionResult> {
            return FileApiFp(configuration).sysFileInfoPreviewGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传头像
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadAvatarPost(file?: string, options?: any): AxiosPromise<XnRestfulResultOfInt64> {
            return FileApiFp(configuration).sysFileInfoUploadAvatarPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传文档
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadDocumentPost(file?: string, options?: any): AxiosPromise<void> {
            return FileApiFp(configuration).sysFileInfoUploadDocumentPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传文件
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadPost(file?: string, options?: any): AxiosPromise<XnRestfulResultOfInt64> {
            return FileApiFp(configuration).sysFileInfoUploadPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传商店图片
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysFileInfoUploadShopPost(file?: string, options?: any): AxiosPromise<void> {
            return FileApiFp(configuration).sysFileInfoUploadShopPost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @summary 删除文件
     * @param {DeleteFileInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoDeletePost(body?: DeleteFileInfoInput, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取文件详情
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoDetailGet(id: number, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 下载文件
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoDownloadGet(id: number, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoDownloadGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取文件列表
     * @param {number} [id] 文件Id
     * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
     * @param {string} [fileBucket] 文件仓库
     * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
     * @param {string} [fileSuffix] 文件后缀
     * @param {number} [fileSizeKb] 文件大小kb
     * @param {string} [fileSizeInfo] 文件大小信息，计算后的
     * @param {string} [fileObjectName] 存储到bucket的名称（文件唯一标识id）
     * @param {string} [filePath] 存储路径
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoListGet(id?: number, fileLocation?: number, fileBucket?: string, fileOriginName?: string, fileSuffix?: string, fileSizeKb?: number, fileSizeInfo?: string, fileObjectName?: string, filePath?: string, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoListGet(id, fileLocation, fileBucket, fileOriginName, fileSuffix, fileSizeKb, fileSizeInfo, fileObjectName, filePath, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页获取文件列表
     * @param {number} [fileLocation] 文件存储位置（1:阿里云，2:腾讯云，3:minio，4:本地）
     * @param {string} [fileBucket] 文件仓库
     * @param {string} [fileOriginName] 文件名称（上传时候的文件名）
     * @param {string} [searchValue] 搜索值
     * @param {number} [pageNo] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [searchBeginTime] 搜索开始时间
     * @param {string} [searchEndTime] 搜索结束时间
     * @param {string} [sortField] 排序字段
     * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
     * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoPageGet(fileLocation?: number, fileBucket?: string, fileOriginName?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoPageGet(fileLocation, fileBucket, fileOriginName, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 预览文件
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoPreviewGet(id: number, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoPreviewGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传头像
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoUploadAvatarPost(file?: string, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoUploadAvatarPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传文档
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoUploadDocumentPost(file?: string, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoUploadDocumentPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传文件
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoUploadPost(file?: string, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoUploadPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传商店图片
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public sysFileInfoUploadShopPost(file?: string, options?: any) {
        return FileApiFp(this.configuration).sysFileInfoUploadShopPost(file, options).then((request) => request(this.axios, this.basePath));
    }
}
