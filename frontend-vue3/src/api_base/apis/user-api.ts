/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET通用权限管理平台
 * 前后端分离架构，开箱即用，紧随前沿技术。<br/><a href='https://gitee.com/Run2948/Admin.NET/'>https://gitee.com/Run2948/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddUserInput } from '../models';
import { ChangePasswordUserInput } from '../models';
import { CommonStatus } from '../models';
import { DeleteUserInput } from '../models';
import { EmpExtOrgPosOutput } from '../models';
import { QueryUserInput } from '../models';
import { UpdateUserBaseInfoInput } from '../models';
import { UpdateUserInput } from '../models';
import { UpdateUserRoleDataInput } from '../models';
import { UpdateUserStatusInput } from '../models';
import { UploadAvatarInput } from '../models';
import { XnRestfulResultOfIActionResult } from '../models';
import { XnRestfulResultOfObject } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加用户
         * @param {AddUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserAddPost: async (body?: AddUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户状态
         * @param {UpdateUserStatusInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserChangeStatusPost: async (body?: UpdateUserStatusInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/changeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除用户
         * @param {DeleteUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserDeletePost: async (body?: DeleteUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看用户
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserDetailGet: async (id?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户
         * @param {UpdateUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserEditPost: async (body?: UpdateUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户导出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserExportGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授权用户数据范围
         * @param {UpdateUserRoleDataInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserGrantDataPost: async (body?: UpdateUserRoleDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/grantData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授权用户角色
         * @param {UpdateUserRoleDataInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserGrantRolePost: async (body?: UpdateUserRoleDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/grantRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户导入
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserImportPost: async (file?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户拥有数据
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserOwnDataGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysUserOwnDataGet.');
            }
            const localVarPath = `/sysUser/ownData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户拥有角色
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserOwnRoleGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysUserOwnRoleGet.');
            }
            const localVarPath = `/sysUser/ownRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询用户
         * @param {string} [account] 账号
         * @param {string} [password] 密码
         * @param {string} [nickName] 昵称
         * @param {string} [name] 姓名
         * @param {string} [avatar] 头像
         * @param {Date} [birthday] 生日
         * @param {number} [sex] 性别-男_1、女_2
         * @param {string} [email] 邮箱
         * @param {string} [phone] 手机
         * @param {string} [tel] 电话
         * @param {CommonStatus} [status] 状态-正常_0、停用_1、删除_2
         * @param {string} [sysEmpParamId] 员工Id
         * @param {string} [sysEmpParamJobNum] 工号
         * @param {string} [sysEmpParamOrgId] 机构Id
         * @param {string} [sysEmpParamOrgName] 机构名称
         * @param {Array&lt;EmpExtOrgPosOutput&gt;} [sysEmpParamExtIds] 附属机构
         * @param {Array&lt;number&gt;} [sysEmpParamPosIdList] 职位集合
         * @param {CommonStatus} [searchStatus] 搜索状态（字典 0正常 1停用 2删除）
         * @param {Array&lt;number&gt;} [grantMenuIdList] 
         * @param {Array&lt;number&gt;} [grantRoleIdList] 
         * @param {Array&lt;number&gt;} [grantOrgIdList] 
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserPageGet: async (account?: string, password?: string, nickName?: string, name?: string, avatar?: string, birthday?: Date, sex?: number, email?: string, phone?: string, tel?: string, status?: CommonStatus, sysEmpParamId?: string, sysEmpParamJobNum?: string, sysEmpParamOrgId?: string, sysEmpParamOrgName?: string, sysEmpParamExtIds?: Array<EmpExtOrgPosOutput>, sysEmpParamPosIdList?: Array<number>, searchStatus?: CommonStatus, grantMenuIdList?: Array<number>, grantRoleIdList?: Array<number>, grantOrgIdList?: Array<number>, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (account !== undefined) {
                localVarQueryParameter['Account'] = account;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }

            if (nickName !== undefined) {
                localVarQueryParameter['NickName'] = nickName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (avatar !== undefined) {
                localVarQueryParameter['Avatar'] = avatar;
            }

            if (birthday !== undefined) {
                localVarQueryParameter['Birthday'] = (birthday as any instanceof Date) ?
                    (birthday as any).toISOString() :
                    birthday;
            }

            if (sex !== undefined) {
                localVarQueryParameter['Sex'] = sex;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (phone !== undefined) {
                localVarQueryParameter['Phone'] = phone;
            }

            if (tel !== undefined) {
                localVarQueryParameter['Tel'] = tel;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (sysEmpParamId !== undefined) {
                localVarQueryParameter['SysEmpParam.Id'] = sysEmpParamId;
            }

            if (sysEmpParamJobNum !== undefined) {
                localVarQueryParameter['SysEmpParam.JobNum'] = sysEmpParamJobNum;
            }

            if (sysEmpParamOrgId !== undefined) {
                localVarQueryParameter['SysEmpParam.OrgId'] = sysEmpParamOrgId;
            }

            if (sysEmpParamOrgName !== undefined) {
                localVarQueryParameter['SysEmpParam.OrgName'] = sysEmpParamOrgName;
            }

            if (sysEmpParamExtIds) {
                localVarQueryParameter['SysEmpParam.ExtIds'] = sysEmpParamExtIds;
            }

            if (sysEmpParamPosIdList) {
                localVarQueryParameter['SysEmpParam.PosIdList'] = sysEmpParamPosIdList;
            }

            if (searchStatus !== undefined) {
                localVarQueryParameter['SearchStatus'] = searchStatus;
            }

            if (grantMenuIdList) {
                localVarQueryParameter['GrantMenuIdList'] = grantMenuIdList;
            }

            if (grantRoleIdList) {
                localVarQueryParameter['GrantRoleIdList'] = grantRoleIdList;
            }

            if (grantOrgIdList) {
                localVarQueryParameter['GrantOrgIdList'] = grantOrgIdList;
            }

            if (searchValue !== undefined) {
                localVarQueryParameter['SearchValue'] = searchValue;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['PageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (searchBeginTime !== undefined) {
                localVarQueryParameter['SearchBeginTime'] = searchBeginTime;
            }

            if (searchEndTime !== undefined) {
                localVarQueryParameter['SearchEndTime'] = searchEndTime;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重置用户密码
         * @param {QueryUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserResetPwdPost: async (body?: QueryUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/resetPwd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户选择器
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserSelectorGet: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/selector`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户头像
         * @param {UploadAvatarInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserUpdateAvatarPost: async (body?: UploadAvatarInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/updateAvatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户信息
         * @param {UpdateUserBaseInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserUpdateInfoPost: async (body?: UpdateUserBaseInfoInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/updateInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户密码
         * @param {ChangePasswordUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserUpdatePwdPost: async (body?: ChangePasswordUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysUser/updatePwd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加用户
         * @param {AddUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserAddPost(body?: AddUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改用户状态
         * @param {UpdateUserStatusInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserChangeStatusPost(body?: UpdateUserStatusInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserChangeStatusPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除用户
         * @param {DeleteUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserDeletePost(body?: DeleteUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查看用户
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserDetailGet(id?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新用户
         * @param {UpdateUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserEditPost(body?: UpdateUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 用户导出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserExportGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfIActionResult>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserExportGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 授权用户数据范围
         * @param {UpdateUserRoleDataInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserGrantDataPost(body?: UpdateUserRoleDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserGrantDataPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 授权用户角色
         * @param {UpdateUserRoleDataInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserGrantRolePost(body?: UpdateUserRoleDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserGrantRolePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 用户导入
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserImportPost(file?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserImportPost(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户拥有数据
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserOwnDataGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserOwnDataGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户拥有角色
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserOwnRoleGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserOwnRoleGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询用户
         * @param {string} [account] 账号
         * @param {string} [password] 密码
         * @param {string} [nickName] 昵称
         * @param {string} [name] 姓名
         * @param {string} [avatar] 头像
         * @param {Date} [birthday] 生日
         * @param {number} [sex] 性别-男_1、女_2
         * @param {string} [email] 邮箱
         * @param {string} [phone] 手机
         * @param {string} [tel] 电话
         * @param {CommonStatus} [status] 状态-正常_0、停用_1、删除_2
         * @param {string} [sysEmpParamId] 员工Id
         * @param {string} [sysEmpParamJobNum] 工号
         * @param {string} [sysEmpParamOrgId] 机构Id
         * @param {string} [sysEmpParamOrgName] 机构名称
         * @param {Array&lt;EmpExtOrgPosOutput&gt;} [sysEmpParamExtIds] 附属机构
         * @param {Array&lt;number&gt;} [sysEmpParamPosIdList] 职位集合
         * @param {CommonStatus} [searchStatus] 搜索状态（字典 0正常 1停用 2删除）
         * @param {Array&lt;number&gt;} [grantMenuIdList] 
         * @param {Array&lt;number&gt;} [grantRoleIdList] 
         * @param {Array&lt;number&gt;} [grantOrgIdList] 
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserPageGet(account?: string, password?: string, nickName?: string, name?: string, avatar?: string, birthday?: Date, sex?: number, email?: string, phone?: string, tel?: string, status?: CommonStatus, sysEmpParamId?: string, sysEmpParamJobNum?: string, sysEmpParamOrgId?: string, sysEmpParamOrgName?: string, sysEmpParamExtIds?: Array<EmpExtOrgPosOutput>, sysEmpParamPosIdList?: Array<number>, searchStatus?: CommonStatus, grantMenuIdList?: Array<number>, grantRoleIdList?: Array<number>, grantOrgIdList?: Array<number>, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserPageGet(account, password, nickName, name, avatar, birthday, sex, email, phone, tel, status, sysEmpParamId, sysEmpParamJobNum, sysEmpParamOrgId, sysEmpParamOrgName, sysEmpParamExtIds, sysEmpParamPosIdList, searchStatus, grantMenuIdList, grantRoleIdList, grantOrgIdList, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 重置用户密码
         * @param {QueryUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserResetPwdPost(body?: QueryUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserResetPwdPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户选择器
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserSelectorGet(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserSelectorGet(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改用户头像
         * @param {UploadAvatarInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserUpdateAvatarPost(body?: UploadAvatarInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserUpdateAvatarPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新用户信息
         * @param {UpdateUserBaseInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserUpdateInfoPost(body?: UpdateUserBaseInfoInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserUpdateInfoPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改用户密码
         * @param {ChangePasswordUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysUserUpdatePwdPost(body?: ChangePasswordUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).sysUserUpdatePwdPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加用户
         * @param {AddUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserAddPost(body?: AddUserInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户状态
         * @param {UpdateUserStatusInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserChangeStatusPost(body?: UpdateUserStatusInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserChangeStatusPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除用户
         * @param {DeleteUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserDeletePost(body?: DeleteUserInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看用户
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserDetailGet(id?: number, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return UserApiFp(configuration).sysUserDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户
         * @param {UpdateUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserEditPost(body?: UpdateUserInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户导出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserExportGet(options?: any): AxiosPromise<XnRestfulResultOfIActionResult> {
            return UserApiFp(configuration).sysUserExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授权用户数据范围
         * @param {UpdateUserRoleDataInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserGrantDataPost(body?: UpdateUserRoleDataInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserGrantDataPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授权用户角色
         * @param {UpdateUserRoleDataInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserGrantRolePost(body?: UpdateUserRoleDataInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserGrantRolePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户导入
         * @param {string} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserImportPost(file?: string, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserImportPost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户拥有数据
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserOwnDataGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return UserApiFp(configuration).sysUserOwnDataGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户拥有角色
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserOwnRoleGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return UserApiFp(configuration).sysUserOwnRoleGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询用户
         * @param {string} [account] 账号
         * @param {string} [password] 密码
         * @param {string} [nickName] 昵称
         * @param {string} [name] 姓名
         * @param {string} [avatar] 头像
         * @param {Date} [birthday] 生日
         * @param {number} [sex] 性别-男_1、女_2
         * @param {string} [email] 邮箱
         * @param {string} [phone] 手机
         * @param {string} [tel] 电话
         * @param {CommonStatus} [status] 状态-正常_0、停用_1、删除_2
         * @param {string} [sysEmpParamId] 员工Id
         * @param {string} [sysEmpParamJobNum] 工号
         * @param {string} [sysEmpParamOrgId] 机构Id
         * @param {string} [sysEmpParamOrgName] 机构名称
         * @param {Array&lt;EmpExtOrgPosOutput&gt;} [sysEmpParamExtIds] 附属机构
         * @param {Array&lt;number&gt;} [sysEmpParamPosIdList] 职位集合
         * @param {CommonStatus} [searchStatus] 搜索状态（字典 0正常 1停用 2删除）
         * @param {Array&lt;number&gt;} [grantMenuIdList] 
         * @param {Array&lt;number&gt;} [grantRoleIdList] 
         * @param {Array&lt;number&gt;} [grantOrgIdList] 
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserPageGet(account?: string, password?: string, nickName?: string, name?: string, avatar?: string, birthday?: Date, sex?: number, email?: string, phone?: string, tel?: string, status?: CommonStatus, sysEmpParamId?: string, sysEmpParamJobNum?: string, sysEmpParamOrgId?: string, sysEmpParamOrgName?: string, sysEmpParamExtIds?: Array<EmpExtOrgPosOutput>, sysEmpParamPosIdList?: Array<number>, searchStatus?: CommonStatus, grantMenuIdList?: Array<number>, grantRoleIdList?: Array<number>, grantOrgIdList?: Array<number>, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return UserApiFp(configuration).sysUserPageGet(account, password, nickName, name, avatar, birthday, sex, email, phone, tel, status, sysEmpParamId, sysEmpParamJobNum, sysEmpParamOrgId, sysEmpParamOrgName, sysEmpParamExtIds, sysEmpParamPosIdList, searchStatus, grantMenuIdList, grantRoleIdList, grantOrgIdList, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 重置用户密码
         * @param {QueryUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserResetPwdPost(body?: QueryUserInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserResetPwdPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户选择器
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserSelectorGet(name?: string, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return UserApiFp(configuration).sysUserSelectorGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户头像
         * @param {UploadAvatarInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserUpdateAvatarPost(body?: UploadAvatarInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserUpdateAvatarPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户信息
         * @param {UpdateUserBaseInfoInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserUpdateInfoPost(body?: UpdateUserBaseInfoInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserUpdateInfoPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户密码
         * @param {ChangePasswordUserInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysUserUpdatePwdPost(body?: ChangePasswordUserInput, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).sysUserUpdatePwdPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 增加用户
     * @param {AddUserInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserAddPost(body?: AddUserInput, options?: any) {
        return UserApiFp(this.configuration).sysUserAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 修改用户状态
     * @param {UpdateUserStatusInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserChangeStatusPost(body?: UpdateUserStatusInput, options?: any) {
        return UserApiFp(this.configuration).sysUserChangeStatusPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除用户
     * @param {DeleteUserInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserDeletePost(body?: DeleteUserInput, options?: any) {
        return UserApiFp(this.configuration).sysUserDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查看用户
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserDetailGet(id?: number, options?: any) {
        return UserApiFp(this.configuration).sysUserDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新用户
     * @param {UpdateUserInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserEditPost(body?: UpdateUserInput, options?: any) {
        return UserApiFp(this.configuration).sysUserEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 用户导出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserExportGet(options?: any) {
        return UserApiFp(this.configuration).sysUserExportGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 授权用户数据范围
     * @param {UpdateUserRoleDataInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserGrantDataPost(body?: UpdateUserRoleDataInput, options?: any) {
        return UserApiFp(this.configuration).sysUserGrantDataPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 授权用户角色
     * @param {UpdateUserRoleDataInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserGrantRolePost(body?: UpdateUserRoleDataInput, options?: any) {
        return UserApiFp(this.configuration).sysUserGrantRolePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 用户导入
     * @param {string} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserImportPost(file?: string, options?: any) {
        return UserApiFp(this.configuration).sysUserImportPost(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取用户拥有数据
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserOwnDataGet(id: number, options?: any) {
        return UserApiFp(this.configuration).sysUserOwnDataGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取用户拥有角色
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserOwnRoleGet(id: number, options?: any) {
        return UserApiFp(this.configuration).sysUserOwnRoleGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页查询用户
     * @param {string} [account] 账号
     * @param {string} [password] 密码
     * @param {string} [nickName] 昵称
     * @param {string} [name] 姓名
     * @param {string} [avatar] 头像
     * @param {Date} [birthday] 生日
     * @param {number} [sex] 性别-男_1、女_2
     * @param {string} [email] 邮箱
     * @param {string} [phone] 手机
     * @param {string} [tel] 电话
     * @param {CommonStatus} [status] 状态-正常_0、停用_1、删除_2
     * @param {string} [sysEmpParamId] 员工Id
     * @param {string} [sysEmpParamJobNum] 工号
     * @param {string} [sysEmpParamOrgId] 机构Id
     * @param {string} [sysEmpParamOrgName] 机构名称
     * @param {Array&lt;EmpExtOrgPosOutput&gt;} [sysEmpParamExtIds] 附属机构
     * @param {Array&lt;number&gt;} [sysEmpParamPosIdList] 职位集合
     * @param {CommonStatus} [searchStatus] 搜索状态（字典 0正常 1停用 2删除）
     * @param {Array&lt;number&gt;} [grantMenuIdList] 
     * @param {Array&lt;number&gt;} [grantRoleIdList] 
     * @param {Array&lt;number&gt;} [grantOrgIdList] 
     * @param {string} [searchValue] 搜索值
     * @param {number} [pageNo] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [searchBeginTime] 搜索开始时间
     * @param {string} [searchEndTime] 搜索结束时间
     * @param {string} [sortField] 排序字段
     * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
     * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserPageGet(account?: string, password?: string, nickName?: string, name?: string, avatar?: string, birthday?: Date, sex?: number, email?: string, phone?: string, tel?: string, status?: CommonStatus, sysEmpParamId?: string, sysEmpParamJobNum?: string, sysEmpParamOrgId?: string, sysEmpParamOrgName?: string, sysEmpParamExtIds?: Array<EmpExtOrgPosOutput>, sysEmpParamPosIdList?: Array<number>, searchStatus?: CommonStatus, grantMenuIdList?: Array<number>, grantRoleIdList?: Array<number>, grantOrgIdList?: Array<number>, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any) {
        return UserApiFp(this.configuration).sysUserPageGet(account, password, nickName, name, avatar, birthday, sex, email, phone, tel, status, sysEmpParamId, sysEmpParamJobNum, sysEmpParamOrgId, sysEmpParamOrgName, sysEmpParamExtIds, sysEmpParamPosIdList, searchStatus, grantMenuIdList, grantRoleIdList, grantOrgIdList, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 重置用户密码
     * @param {QueryUserInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserResetPwdPost(body?: QueryUserInput, options?: any) {
        return UserApiFp(this.configuration).sysUserResetPwdPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取用户选择器
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserSelectorGet(name?: string, options?: any) {
        return UserApiFp(this.configuration).sysUserSelectorGet(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 修改用户头像
     * @param {UploadAvatarInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserUpdateAvatarPost(body?: UploadAvatarInput, options?: any) {
        return UserApiFp(this.configuration).sysUserUpdateAvatarPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新用户信息
     * @param {UpdateUserBaseInfoInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserUpdateInfoPost(body?: UpdateUserBaseInfoInput, options?: any) {
        return UserApiFp(this.configuration).sysUserUpdateInfoPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 修改用户密码
     * @param {ChangePasswordUserInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public sysUserUpdatePwdPost(body?: ChangePasswordUserInput, options?: any) {
        return UserApiFp(this.configuration).sysUserUpdatePwdPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
