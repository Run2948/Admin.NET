/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET通用权限管理平台
 * 前后端分离架构，开箱即用，紧随前沿技术。<br/><a href='https://gitee.com/Run2948/Admin.NET/'>https://gitee.com/Run2948/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddPosInput } from '../models';
import { DeletePosInput } from '../models';
import { UpdatePosInput } from '../models';
import { XnRestfulResultOfObject } from '../models';
import { XnRestfulResultOfSysPos } from '../models';
/**
 * PosApi - axios parameter creator
 * @export
 */
export const PosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加职位
         * @param {AddPosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosAddPost: async (body?: AddPosInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysPos/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除职位
         * @param {DeletePosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosDeletePost: async (body?: DeletePosInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysPos/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取职位
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosDetailGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysPosDetailGet.');
            }
            const localVarPath = `/sysPos/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新职位
         * @param {UpdatePosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosEditPost: async (body?: UpdatePosInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysPos/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取职位列表
         * @param {string} [name] 名称
         * @param {string} [code] 编码
         * @param {number} [sort] 排序
         * @param {string} [remark] 备注
         * @param {number} [status] 状态（字典 0正常 1停用 2删除）
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosListGet: async (name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysPos/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (sort !== undefined) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (remark !== undefined) {
                localVarQueryParameter['Remark'] = remark;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['PageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页获取职位
         * @param {string} [name] 名称
         * @param {string} [code] 编码
         * @param {number} [sort] 排序
         * @param {string} [remark] 备注
         * @param {number} [status] 状态（字典 0正常 1停用 2删除）
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosPageGet: async (name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysPos/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (sort !== undefined) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (remark !== undefined) {
                localVarQueryParameter['Remark'] = remark;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['PageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PosApi - functional programming interface
 * @export
 */
export const PosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加职位
         * @param {AddPosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysPosAddPost(body?: AddPosInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PosApiAxiosParamCreator(configuration).sysPosAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除职位
         * @param {DeletePosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysPosDeletePost(body?: DeletePosInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PosApiAxiosParamCreator(configuration).sysPosDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取职位
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysPosDetailGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfSysPos>> {
            const localVarAxiosArgs = await PosApiAxiosParamCreator(configuration).sysPosDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新职位
         * @param {UpdatePosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysPosEditPost(body?: UpdatePosInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PosApiAxiosParamCreator(configuration).sysPosEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取职位列表
         * @param {string} [name] 名称
         * @param {string} [code] 编码
         * @param {number} [sort] 排序
         * @param {string} [remark] 备注
         * @param {number} [status] 状态（字典 0正常 1停用 2删除）
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysPosListGet(name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await PosApiAxiosParamCreator(configuration).sysPosListGet(name, code, sort, remark, status, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页获取职位
         * @param {string} [name] 名称
         * @param {string} [code] 编码
         * @param {number} [sort] 排序
         * @param {string} [remark] 备注
         * @param {number} [status] 状态（字典 0正常 1停用 2删除）
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysPosPageGet(name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await PosApiAxiosParamCreator(configuration).sysPosPageGet(name, code, sort, remark, status, pageNo, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PosApi - factory interface
 * @export
 */
export const PosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加职位
         * @param {AddPosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosAddPost(body?: AddPosInput, options?: any): AxiosPromise<void> {
            return PosApiFp(configuration).sysPosAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除职位
         * @param {DeletePosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosDeletePost(body?: DeletePosInput, options?: any): AxiosPromise<void> {
            return PosApiFp(configuration).sysPosDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取职位
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosDetailGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfSysPos> {
            return PosApiFp(configuration).sysPosDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新职位
         * @param {UpdatePosInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosEditPost(body?: UpdatePosInput, options?: any): AxiosPromise<void> {
            return PosApiFp(configuration).sysPosEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取职位列表
         * @param {string} [name] 名称
         * @param {string} [code] 编码
         * @param {number} [sort] 排序
         * @param {string} [remark] 备注
         * @param {number} [status] 状态（字典 0正常 1停用 2删除）
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosListGet(name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return PosApiFp(configuration).sysPosListGet(name, code, sort, remark, status, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页获取职位
         * @param {string} [name] 名称
         * @param {string} [code] 编码
         * @param {number} [sort] 排序
         * @param {string} [remark] 备注
         * @param {number} [status] 状态（字典 0正常 1停用 2删除）
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysPosPageGet(name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return PosApiFp(configuration).sysPosPageGet(name, code, sort, remark, status, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PosApi - object-oriented interface
 * @export
 * @class PosApi
 * @extends {BaseAPI}
 */
export class PosApi extends BaseAPI {
    /**
     * 
     * @summary 增加职位
     * @param {AddPosInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public sysPosAddPost(body?: AddPosInput, options?: any) {
        return PosApiFp(this.configuration).sysPosAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除职位
     * @param {DeletePosInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public sysPosDeletePost(body?: DeletePosInput, options?: any) {
        return PosApiFp(this.configuration).sysPosDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取职位
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public sysPosDetailGet(id: number, options?: any) {
        return PosApiFp(this.configuration).sysPosDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新职位
     * @param {UpdatePosInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public sysPosEditPost(body?: UpdatePosInput, options?: any) {
        return PosApiFp(this.configuration).sysPosEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取职位列表
     * @param {string} [name] 名称
     * @param {string} [code] 编码
     * @param {number} [sort] 排序
     * @param {string} [remark] 备注
     * @param {number} [status] 状态（字典 0正常 1停用 2删除）
     * @param {number} [pageNo] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public sysPosListGet(name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options?: any) {
        return PosApiFp(this.configuration).sysPosListGet(name, code, sort, remark, status, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页获取职位
     * @param {string} [name] 名称
     * @param {string} [code] 编码
     * @param {number} [sort] 排序
     * @param {string} [remark] 备注
     * @param {number} [status] 状态（字典 0正常 1停用 2删除）
     * @param {number} [pageNo] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PosApi
     */
    public sysPosPageGet(name?: string, code?: string, sort?: number, remark?: string, status?: number, pageNo?: number, pageSize?: number, options?: any) {
        return PosApiFp(this.configuration).sysPosPageGet(name, code, sort, remark, status, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
