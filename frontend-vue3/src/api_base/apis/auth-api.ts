/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET通用权限管理平台
 * 前后端分离架构，开箱即用，紧随前沿技术。<br/><a href='https://gitee.com/Run2948/Admin.NET/'>https://gitee.com/Run2948/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ClickWordCaptchaInput } from '../models';
import { LoginInput } from '../models';
import { XnRestfulResultOfBoolean } from '../models';
import { XnRestfulResultOfLoginOutput } from '../models';
import { XnRestfulResultOfString } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 校验验证码
         * @param {ClickWordCaptchaInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaCheckPost: async (body?: ClickWordCaptchaInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/captcha/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取验证码（默认点选模式）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaGetPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/captcha/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取验证码开关
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptchaOpenGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getCaptchaOpen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取当前登录用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUserGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getLoginUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 默认用户名/密码：admin/admin
         * @summary 用户登录
         * @param {LoginInput} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (body: LoginInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loginPost.');
            }
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 退出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary 校验验证码
         * @param {ClickWordCaptchaInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async captchaCheckPost(body?: ClickWordCaptchaInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).captchaCheckPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取验证码（默认点选模式）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async captchaGetPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).captchaGetPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取验证码开关
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaptchaOpenGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfBoolean>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).getCaptchaOpenGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 获取当前登录用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginUserGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfLoginOutput>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).getLoginUserGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 默认用户名/密码：admin/admin
         * @summary 用户登录
         * @param {LoginInput} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(body: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfString>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).loginPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 退出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthApiAxiosParamCreator(configuration).logoutGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary 校验验证码
         * @param {ClickWordCaptchaInput} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaCheckPost(body?: ClickWordCaptchaInput, options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).captchaCheckPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取验证码（默认点选模式）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        captchaGetPost(options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).captchaGetPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取验证码开关
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaptchaOpenGet(options?: any): AxiosPromise<XnRestfulResultOfBoolean> {
            return AuthApiFp(configuration).getCaptchaOpenGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取当前登录用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUserGet(options?: any): AxiosPromise<XnRestfulResultOfLoginOutput> {
            return AuthApiFp(configuration).getLoginUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 默认用户名/密码：admin/admin
         * @summary 用户登录
         * @param {LoginInput} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(body: LoginInput, options?: any): AxiosPromise<XnRestfulResultOfString> {
            return AuthApiFp(configuration).loginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 退出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutGet(options?: any): AxiosPromise<void> {
            return AuthApiFp(configuration).logoutGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @summary 校验验证码
     * @param {ClickWordCaptchaInput} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public captchaCheckPost(body?: ClickWordCaptchaInput, options?: any) {
        return AuthApiFp(this.configuration).captchaCheckPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取验证码（默认点选模式）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public captchaGetPost(options?: any) {
        return AuthApiFp(this.configuration).captchaGetPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取验证码开关
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getCaptchaOpenGet(options?: any) {
        return AuthApiFp(this.configuration).getCaptchaOpenGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取当前登录用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getLoginUserGet(options?: any) {
        return AuthApiFp(this.configuration).getLoginUserGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 默认用户名/密码：admin/admin
     * @summary 用户登录
     * @param {LoginInput} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginPost(body: LoginInput, options?: any) {
        return AuthApiFp(this.configuration).loginPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 退出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logoutGet(options?: any) {
        return AuthApiFp(this.configuration).logoutGet(options).then((request) => request(this.axios, this.basePath));
    }
}
