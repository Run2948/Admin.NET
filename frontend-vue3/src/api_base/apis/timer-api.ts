/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET通用权限管理平台
 * 前后端分离架构，开箱即用，紧随前沿技术。<br/><a href='https://gitee.com/Run2948/Admin.NET/'>https://gitee.com/Run2948/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddJobInput } from '../models';
import { DeleteJobInput } from '../models';
import { RequestTypeEnum } from '../models';
import { SpareTimeExecuteTypes } from '../models';
import { SpareTimeTypes } from '../models';
import { StopJobInput } from '../models';
import { UpdateJobInput } from '../models';
import { XnRestfulResultOfObject } from '../models';
/**
 * TimerApi - axios parameter creator
 * @export
 */
export const TimerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加任务
         * @param {AddJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersAddPost: async (body?: AddJobInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除任务
         * @param {DeleteJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersDeletePost: async (body?: DeleteJobInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查看任务
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersDetailGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sysTimersDetailGet.');
            }
            const localVarPath = `/sysTimers/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改任务
         * @param {UpdateJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersEditPost: async (body?: UpdateJobInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有本地任务
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersLocalJobListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/localJobList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页获取任务列表
         * @param {string} [jobName] 任务名称
         * @param {boolean} [doOnce] 只执行一次
         * @param {boolean} [startNow] 立即执行（默认等待启动）
         * @param {SpareTimeExecuteTypes} [executeType] 执行类型(并行、列队)
         * @param {number} [interval] 执行间隔时间（单位秒）
         * @param {string} [cron] Cron表达式
         * @param {SpareTimeTypes} [timerType] 定时器类型
         * @param {string} [requestUrl] 请求url
         * @param {string} [requestParameters] 请求参数（Post，Put请求用）
         * @param {string} [headers] Headers(可以包含如：Authorization授权认证)  格式：{\&quot;Authorization\&quot;:\&quot;userpassword..\&quot;}
         * @param {RequestTypeEnum} [requestType] 请求类型
         * @param {string} [remark] 备注
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersPageGet: async (jobName?: string, doOnce?: boolean, startNow?: boolean, executeType?: SpareTimeExecuteTypes, interval?: number, cron?: string, timerType?: SpareTimeTypes, requestUrl?: string, requestParameters?: string, headers?: string, requestType?: RequestTypeEnum, remark?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            if (jobName !== undefined) {
                localVarQueryParameter['JobName'] = jobName;
            }

            if (doOnce !== undefined) {
                localVarQueryParameter['DoOnce'] = doOnce;
            }

            if (startNow !== undefined) {
                localVarQueryParameter['StartNow'] = startNow;
            }

            if (executeType !== undefined) {
                localVarQueryParameter['ExecuteType'] = executeType;
            }

            if (interval !== undefined) {
                localVarQueryParameter['Interval'] = interval;
            }

            if (cron !== undefined) {
                localVarQueryParameter['Cron'] = cron;
            }

            if (timerType !== undefined) {
                localVarQueryParameter['TimerType'] = timerType;
            }

            if (requestUrl !== undefined) {
                localVarQueryParameter['RequestUrl'] = requestUrl;
            }

            if (requestParameters !== undefined) {
                localVarQueryParameter['RequestParameters'] = requestParameters;
            }

            if (headers !== undefined) {
                localVarQueryParameter['Headers'] = headers;
            }

            if (requestType !== undefined) {
                localVarQueryParameter['RequestType'] = requestType;
            }

            if (remark !== undefined) {
                localVarQueryParameter['Remark'] = remark;
            }

            if (searchValue !== undefined) {
                localVarQueryParameter['SearchValue'] = searchValue;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['PageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (searchBeginTime !== undefined) {
                localVarQueryParameter['SearchBeginTime'] = searchBeginTime;
            }

            if (searchEndTime !== undefined) {
                localVarQueryParameter['SearchEndTime'] = searchEndTime;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 启动任务
         * @param {AddJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersStartPost: async (body?: AddJobInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 停止任务
         * @param {StopJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersStopPost: async (body?: StopJobInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysTimers/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            localVarHeaderParameter['Content-Type'] = 'application/xml';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimerApi - functional programming interface
 * @export
 */
export const TimerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加任务
         * @param {AddJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersAddPost(body?: AddJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除任务
         * @param {DeleteJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersDeletePost(body?: DeleteJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查看任务
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersDetailGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改任务
         * @param {UpdateJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersEditPost(body?: UpdateJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersEditPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有本地任务
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersLocalJobListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersLocalJobListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页获取任务列表
         * @param {string} [jobName] 任务名称
         * @param {boolean} [doOnce] 只执行一次
         * @param {boolean} [startNow] 立即执行（默认等待启动）
         * @param {SpareTimeExecuteTypes} [executeType] 执行类型(并行、列队)
         * @param {number} [interval] 执行间隔时间（单位秒）
         * @param {string} [cron] Cron表达式
         * @param {SpareTimeTypes} [timerType] 定时器类型
         * @param {string} [requestUrl] 请求url
         * @param {string} [requestParameters] 请求参数（Post，Put请求用）
         * @param {string} [headers] Headers(可以包含如：Authorization授权认证)  格式：{\&quot;Authorization\&quot;:\&quot;userpassword..\&quot;}
         * @param {RequestTypeEnum} [requestType] 请求类型
         * @param {string} [remark] 备注
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersPageGet(jobName?: string, doOnce?: boolean, startNow?: boolean, executeType?: SpareTimeExecuteTypes, interval?: number, cron?: string, timerType?: SpareTimeTypes, requestUrl?: string, requestParameters?: string, headers?: string, requestType?: RequestTypeEnum, remark?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XnRestfulResultOfObject>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersPageGet(jobName, doOnce, startNow, executeType, interval, cron, timerType, requestUrl, requestParameters, headers, requestType, remark, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 启动任务
         * @param {AddJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersStartPost(body?: AddJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersStartPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 停止任务
         * @param {StopJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysTimersStopPost(body?: StopJobInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TimerApiAxiosParamCreator(configuration).sysTimersStopPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TimerApi - factory interface
 * @export
 */
export const TimerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 增加任务
         * @param {AddJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersAddPost(body?: AddJobInput, options?: any): AxiosPromise<void> {
            return TimerApiFp(configuration).sysTimersAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除任务
         * @param {DeleteJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersDeletePost(body?: DeleteJobInput, options?: any): AxiosPromise<void> {
            return TimerApiFp(configuration).sysTimersDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查看任务
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersDetailGet(id: number, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return TimerApiFp(configuration).sysTimersDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改任务
         * @param {UpdateJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersEditPost(body?: UpdateJobInput, options?: any): AxiosPromise<void> {
            return TimerApiFp(configuration).sysTimersEditPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有本地任务
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersLocalJobListGet(options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return TimerApiFp(configuration).sysTimersLocalJobListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页获取任务列表
         * @param {string} [jobName] 任务名称
         * @param {boolean} [doOnce] 只执行一次
         * @param {boolean} [startNow] 立即执行（默认等待启动）
         * @param {SpareTimeExecuteTypes} [executeType] 执行类型(并行、列队)
         * @param {number} [interval] 执行间隔时间（单位秒）
         * @param {string} [cron] Cron表达式
         * @param {SpareTimeTypes} [timerType] 定时器类型
         * @param {string} [requestUrl] 请求url
         * @param {string} [requestParameters] 请求参数（Post，Put请求用）
         * @param {string} [headers] Headers(可以包含如：Authorization授权认证)  格式：{\&quot;Authorization\&quot;:\&quot;userpassword..\&quot;}
         * @param {RequestTypeEnum} [requestType] 请求类型
         * @param {string} [remark] 备注
         * @param {string} [searchValue] 搜索值
         * @param {number} [pageNo] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [searchBeginTime] 搜索开始时间
         * @param {string} [searchEndTime] 搜索结束时间
         * @param {string} [sortField] 排序字段
         * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
         * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersPageGet(jobName?: string, doOnce?: boolean, startNow?: boolean, executeType?: SpareTimeExecuteTypes, interval?: number, cron?: string, timerType?: SpareTimeTypes, requestUrl?: string, requestParameters?: string, headers?: string, requestType?: RequestTypeEnum, remark?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any): AxiosPromise<XnRestfulResultOfObject> {
            return TimerApiFp(configuration).sysTimersPageGet(jobName, doOnce, startNow, executeType, interval, cron, timerType, requestUrl, requestParameters, headers, requestType, remark, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 启动任务
         * @param {AddJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersStartPost(body?: AddJobInput, options?: any): AxiosPromise<void> {
            return TimerApiFp(configuration).sysTimersStartPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 停止任务
         * @param {StopJobInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysTimersStopPost(body?: StopJobInput, options?: any): AxiosPromise<void> {
            return TimerApiFp(configuration).sysTimersStopPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimerApi - object-oriented interface
 * @export
 * @class TimerApi
 * @extends {BaseAPI}
 */
export class TimerApi extends BaseAPI {
    /**
     * 
     * @summary 增加任务
     * @param {AddJobInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersAddPost(body?: AddJobInput, options?: any) {
        return TimerApiFp(this.configuration).sysTimersAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 删除任务
     * @param {DeleteJobInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersDeletePost(body?: DeleteJobInput, options?: any) {
        return TimerApiFp(this.configuration).sysTimersDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 查看任务
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersDetailGet(id: number, options?: any) {
        return TimerApiFp(this.configuration).sysTimersDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 修改任务
     * @param {UpdateJobInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersEditPost(body?: UpdateJobInput, options?: any) {
        return TimerApiFp(this.configuration).sysTimersEditPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取所有本地任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersLocalJobListGet(options?: any) {
        return TimerApiFp(this.configuration).sysTimersLocalJobListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 分页获取任务列表
     * @param {string} [jobName] 任务名称
     * @param {boolean} [doOnce] 只执行一次
     * @param {boolean} [startNow] 立即执行（默认等待启动）
     * @param {SpareTimeExecuteTypes} [executeType] 执行类型(并行、列队)
     * @param {number} [interval] 执行间隔时间（单位秒）
     * @param {string} [cron] Cron表达式
     * @param {SpareTimeTypes} [timerType] 定时器类型
     * @param {string} [requestUrl] 请求url
     * @param {string} [requestParameters] 请求参数（Post，Put请求用）
     * @param {string} [headers] Headers(可以包含如：Authorization授权认证)  格式：{\&quot;Authorization\&quot;:\&quot;userpassword..\&quot;}
     * @param {RequestTypeEnum} [requestType] 请求类型
     * @param {string} [remark] 备注
     * @param {string} [searchValue] 搜索值
     * @param {number} [pageNo] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [searchBeginTime] 搜索开始时间
     * @param {string} [searchEndTime] 搜索结束时间
     * @param {string} [sortField] 排序字段
     * @param {string} [sortOrder] 排序方法,默认升序,否则降序(配合antd前端,约定参数为 Ascend,Dscend)
     * @param {string} [descStr] 降序排序(不要问我为什么是descend不是desc，前端约定参数就是这样)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersPageGet(jobName?: string, doOnce?: boolean, startNow?: boolean, executeType?: SpareTimeExecuteTypes, interval?: number, cron?: string, timerType?: SpareTimeTypes, requestUrl?: string, requestParameters?: string, headers?: string, requestType?: RequestTypeEnum, remark?: string, searchValue?: string, pageNo?: number, pageSize?: number, searchBeginTime?: string, searchEndTime?: string, sortField?: string, sortOrder?: string, descStr?: string, options?: any) {
        return TimerApiFp(this.configuration).sysTimersPageGet(jobName, doOnce, startNow, executeType, interval, cron, timerType, requestUrl, requestParameters, headers, requestType, remark, searchValue, pageNo, pageSize, searchBeginTime, searchEndTime, sortField, sortOrder, descStr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 启动任务
     * @param {AddJobInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersStartPost(body?: AddJobInput, options?: any) {
        return TimerApiFp(this.configuration).sysTimersStartPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 停止任务
     * @param {StopJobInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimerApi
     */
    public sysTimersStopPost(body?: StopJobInput, options?: any) {
        return TimerApiFp(this.configuration).sysTimersStopPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
